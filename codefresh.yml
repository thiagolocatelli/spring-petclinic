# Variables ###################################
# DEMO_DOCKER_HOST:
# PROD_CONFIG_SERVER_URL:
# PROD_VAULT_TOKEN:
# PROD_VAULT_URL:
# QA_CONFIG_SERVER_URL:
# QA_VAULT_TOKEN:
# SLACK_CICD_CHANNEL_WEBHOOK:
# SLACK_PAYLOAD_APPROVAL:
# SLACK_PAYLOAD_DEPLOY:
# SONAR_TOKEN:
# #############################################

version: '1.0'
stages:
  - prepare
  - test
  - integration
  - publishing and build
  - deploy to qa
  - deploy to prod
  
steps:
  environment:
    title: Environment
    image: alpine:3.8
    stage: prepare
    commands:
      - echo CF_REPO_OWNER='${{CF_REPO_OWNER}}' CF_REPO_NAME='${{CF_REPO_NAME}}' CF_REVISION='${{CF_REVISION}}'

  main_clone:
    title: Cloning Main Repository...
    stage: prepare
    type: git-clone
    repo: '${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}'
    revision: '${{CF_REVISION}}'
    git: github
  
  checkVersionParallel:
    title: Prepare Environment
    type: parallel
    stage: prepare
    steps:

      printEnv:
        title: Print Environment
        stage: prepare
        image: bash
        commands:
          - env
      
      devVersion:
        title: Set Develop version
        image: 'maven:3.5.2-jdk-8-alpine'
        commands:
          - echo DOCKER_IMAGE_TAG=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec) >> ${{CF_VOLUME_PATH}}/env_vars_to_export
          - echo ARTIFACT_ID=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.artifactId}' --non-recursive exec:exec) >> ${{CF_VOLUME_PATH}}/env_vars_to_export
          - echo DOCKER_CONTAINER_NAME=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.artifactId}' --non-recursive exec:exec)-qa >> ${{CF_VOLUME_PATH}}/env_vars_to_export
        when:
          condition:
            any:
              isDevelopBrand: '"${{CF_BRANCH}}" == "develop"'
              isPullRequest: '"${{CF_PULL_REQUEST_TARGET}}" == "develop"'
          
      releaseVersion:
        title: Set Release Version
        image: 'maven:3.5.2-jdk-8-alpine'
        commands:
          - echo DOCKER_IMAGE_TAG=$(echo ${{CF_BRANCH}} | cut -d'/' -f 2)-RELEASE >> ${{CF_VOLUME_PATH}}/env_vars_to_export
          - echo ARTIFACT_ID=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.artifactId}' --non-recursive exec:exec) >> ${{CF_VOLUME_PATH}}/env_vars_to_export
          - echo DOCKER_CONTAINER_NAME=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.artifactId}' --non-recursive exec:exec) >> ${{CF_VOLUME_PATH}}/env_vars_to_export
        when:
          condition:
            all:
             isReleaseBranch: 'match("${{CF_BRANCH}}", "^release", true) == true' 
          
  PrintDockerTag:
    title: Print Docker image Tag
    stage: prepare
    image: bash
    commands:
      - echo Build Version':'$DOCKER_IMAGE_TAG, Container Name':' $DOCKER_CONTAINER_NAME, Artifact Id':' $ARTIFACT_ID
    on_success: 
      annotations:
        set:
          - entity_id: default/spring-petclinic
            entity_type: pipeline
            annotations:
              - docker_image_tag: ${{DOCKER_IMAGE_TAG}}
              - commit_author: ${{CF_COMMIT_AUTHOR}}


  my_parallel_tasks:
    title: Tests and Validation
    type: parallel
    stage: test
    steps: 
      UnitTests:
        title: Compile/Unit tests
        image: 'maven:3.5.2-jdk-8-alpine'
        commands:
          - echo Junit
          #- mvn -q Dmaven.repo.local=/codefresh/volume/m2_repository package

      SonarQube:
        title: SonarQube Analysis
        image: 'maven:3.5.2-jdk-8-alpine'
        commands:
          - echo SonarQube
         # - mvn -q -Dmaven.repo.local=/codefresh/volume/m2_repository sonar:sonar

      Integration:
        title: Integration test
        image: maven:3.5.2-jdk-8-alpine
        commands:
          - echo Integration
          #- mvn -q -Dmaven.repo.local=/codefresh/volume/m2_repository verify
     
  VersioningArtifacts:
    title: Versioning Artifacts
    stage: publishing and build
    image: maven:3.5.2-jdk-8-alpine
    commands:
      - mvn -q versions:set -DnewVersion=$DOCKER_IMAGE_TAG
    when:
      condition:
        any:
          isDevelopBranch: 'match("${{CF_BRANCH}}", "^develop", true) == true'
          isReleaseBranch: 'match("${{CF_BRANCH}}", "^release", true) == true' 
          
  PublishArtifacts:
    title: Publish Artifacts to Nexus
    stage: publishing and build
    image: maven:3.5.2-jdk-8-alpine
    commands:
      - mvn -q -Dmaven.repo.local=/codefresh/volume/m2_repository clean package -DskipTests=true
      - cat pom.xml
    when:
      condition:
        any:
          isDevelopBranch: 'match("${{CF_BRANCH}}", "^develop", true) == true'
          isReleaseBranch: 'match("${{CF_BRANCH}}", "^release", true) == true'
          
  BuildDockerImage:
    title: Building Docker Image
    type: build
    stage: publishing and build
    image_name: "thiagolocatelli/${{ARTIFACT_ID}}"
    working_directory: ./
    tag: "${{DOCKER_IMAGE_TAG}}"
    dockerfile: Dockerfile
    when:
      condition:
        any:
          isDevelopBranch: 'match("${{CF_BRANCH}}", "^develop", true) == true'
          isReleaseBranch: 'match("${{CF_BRANCH}}", "^release", true) == true' 

  dockerSecurityScan:
    title: Security Scan
    image: alpine:3.8
    stage: publishing and build
    commands:
      - echo "Scanning docker image for vulnerabilities"
    when:
      condition:
        any:
          isDevelopBranch: 'match("${{CF_BRANCH}}", "^develop", true) == true'
          isReleaseBranch: 'match("${{CF_BRANCH}}", "^release", true) == true'

  Push:
    title: Pushing to Registry
    type: push
    stage: publishing and build
    arguments:
      candidate: '${{BuildDockerImage}}'
      tag: "${{DOCKER_IMAGE_TAG}}"
      image_name: "thiagolocatelli/${{ARTIFACT_ID}}"
      registry: dockerhub  
    when:
      condition:
        any:
          isDevelopBranch: 'match("${{CF_BRANCH}}", "^develop", true) == true'
          isReleaseBranch: 'match("${{CF_BRANCH}}", "^release", true) == true'
          
  notifyQAPendingApproval:
    title: Notify Pending Approval
    image: tutum/curl
    stage: deploy to qa
    commands:
      - curl -X POST --data-urlencode 'payload=${{SLACK_PAYLOAD_APPROVAL}}' ${{SLACK_CICD_CHANNEL_WEBHOOK}}
    when:
      branch:
        only:
          - develop  
    
  waitForInputBeforeQA:
    type: pending-approval
    title: Deploy to QA?
    stage: deploy to qa
    timeout:
      duration: 2
      finalState: denied 
    when:
      branch:
        only:
          - develop 
          
  prepQaEnvNow:
    title: Preparing deployment
    image: alpine:3.8
    stage: deploy to qa
    commands:
      - echo "Deploying to QA"
    when:
      steps:
        - name: waitForInputBeforeQA
          on:
            - approved
          
  deployQaEnvNow:
    title: Deploying to QA
    image: codefreshplugins/docker-service
    stage: deploy to qa
    commands:
      - echo Deploying image ${{CF_REPO_OWNER}}/$DOCKER_CONTAINER_NAME:$DOCKER_IMAGE_TAG
      - export DOCKER_HOST=$DEMO_DOCKER_HOST
      - docker container stop $DOCKER_CONTAINER_NAME || true && docker container rm $DOCKER_CONTAINER_NAME || true
      - docker run -d --name $DOCKER_CONTAINER_NAME -e VIRTUAL_POST=8080 -e VIRTUAL_HOST=$DOCKER_CONTAINER_NAME.thiagolocatelli.com -e SPRING_CLOUD_CONFIG_URI=$QA_CONFIG_SERVER_URL -e SPRING_CLOUD_VAULT_URI=$QA_VAULT_URL -e SPRING_CLOUD_VAULT_TOKEN=$QA_VAULT_TOKEN thiagolocatelli/$ARTIFACT_ID:$DOCKER_IMAGE_TAG
    when:
      steps:
        - name: waitForInputBeforeQA
          on:
            - approved
            
  slack_notify:
    title: Notifiy Slack '#CICD'
    image: tutum/curl
    stage: deploy to qa
    commands:
      - curl -X POST --data-urlencode 'payload=${{SLACK_PAYLOAD_DEPLOY}}' ${{SLACK_CICD_CHANNEL_WEBHOOK}}           
    when:
      condition:
        all:
          deployQaEnvNowFinished: deployQaEnvNow.result == 'success' 
            
  notifyProdPendingApproval:
    title: Notify Pending Approval
    image: tutum/curl
    stage: deploy to prod
    commands:
      - curl -X POST --data-urlencode 'payload=${{SLACK_PAYLOAD_APPROVAL}}' ${{SLACK_CICD_CHANNEL_WEBHOOK}} 
    when:
      condition:
        all:
          isReleaseBranch: 'match("${{CF_BRANCH}}", "^release", true) == true'  
          
  waitForInputBeforeProduction:
    type: pending-approval
    title: Deploy to Production?
    stage: deploy to prod
    timeout:
      duration: 2
      finalState: denied 
    when:
      condition:
        all:
          isReleaseBranch: 'match("${{CF_BRANCH}}", "^release", true) == true'
            
  prepProdEnvNow:
    title: Preparing deployment
    image: alpine:3.8
    stage: deploy to prod
    commands:
      - echo "Deploying to Production"
    when:
      steps:
        - name: waitForInputBeforeProduction
          on:
            - approved
            
  destroyProdEnvNow:
    title: Deploying to Production
    image: codefreshplugins/docker-service
    stage: deploy to prod
    commands:
      - echo Deploying image ${{CF_REPO_OWNER}}/$DOCKER_CONTAINER_NAME:$DOCKER_IMAGE_TAG
      - export DOCKER_HOST=$DEMO_DOCKER_HOST
      - docker container stop $DOCKER_CONTAINER_NAME || true && docker container rm $DOCKER_CONTAINER_NAME || true
      - docker run -d --name $DOCKER_CONTAINER_NAME -e VIRTUAL_PORT=8080 -e VIRTUAL_HOST=$DOCKER_CONTAINER_NAME.thiagolocatelli.com -e SPRING_CLOUD_CONFIG_URI=$PROD_CONFIG_SERVER_URL -e SPRING_CLOUD_VAULT_URI=$PROD_VAULT_URL -e SPRING_CLOUD_VAULT_TOKEN=$PROD_VAULT_TOKEN thiagolocatelli/$ARTIFACT_ID:$DOCKER_IMAGE_TAG
    when:
      steps:
        - name: waitForInputBeforeProduction
          on:
            - approved

  slackNotifyProd:
    title: Notifiy Slack '#CICD'
    image: tutum/curl
    stage: deploy to prod
    commands:
      - curl -X POST --data-urlencode 'payload=${{SLACK_PAYLOAD_DEPLOY}}' ${{SLACK_CICD_CHANNEL_WEBHOOK}}           
    when:
      condition:
        all:
          destroyProdEnvNowFinished: destroyProdEnvNow.result == 'success'       